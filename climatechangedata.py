# -*- coding: utf-8 -*-
"""ClimatechangeData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wx7QB5i8lnC4IeJWssUPKlt98bSiQyA5

**Import Libraries**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

"""**Upload & Load Dataset**"""

df = pd.read_csv("Climate_Change_Extended_Dataset.csv")
df.head()

df.shape

df.columns

df.info()

df.describe()

df.isnull().sum()

"""**Data Visualization (EDA)**"""

plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

plt.figure(figsize=(10,6))
sns.violinplot(data=df, x="Country", y="AvgTemp (°C)")
plt.title("Temperature Distribution per Country (Violin Plot)")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

plt.figure(figsize=(12,6))
sns.lineplot(data=df, x='Year', y='AvgTemp (°C)', hue='Country')
plt.title("Average Temperature Over Time by Country")
plt.grid(True)
plt.show()

df['Country_Code'] = df['Country'].astype('category').cat.codes
df.head()

X = df.drop(['AvgTemp (°C)', 'Country'], axis=1)
y = df['AvgTemp (°C)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print("R² Score:", round(r2, 4))
print("Mean Squared Error:", round(mse, 4))

importances = model.feature_importances_
features = X.columns

plt.figure(figsize=(10,6))
sns.barplot(x=importances, y=features)
plt.title("Feature Importance from Random Forest")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()

X_test['Actual_Temp'] = y_test
X_test['Predicted_Temp'] = y_pred

from google.colab import files
df.to_csv('Climate_Change_Dataset.csv', index=False)  # Save DataFrame to CSV
files.download('Climate_Change_Dataset.csv')          # Download the file